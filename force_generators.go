package gologo

import (
	"github.com/go-gl/mathgl/mgl32"
)

func RegisterForceGenerator(f ForceGenerator) {
	forceGenerators = append(forceGenerators, f)
}

func ClearForces(objects []*Object) {
	for _, o := range objects {
		o.Body.Forces = mgl32.Vec3{0.0, 0.0, 0.0}
		o.Body.Torques = 0.0
	}
}

func GenerateForces(duration float64) []*Object {
	result := []*Object{}

	for _, generator := range forceGenerators {
		objects := generator.AccumulateForce(duration)
		result = append(result, objects...)
	}

	return result
}

type ForceGenerator interface {
	AccumulateForce(duration float64) []*Object
}

/////////////////////////////////////////////////////////////
// TwoBodySpring
//

// TwoBodySpring : Generates an attractive or repulsive force between two objects when the distance between them differs from the rest length of the spring.
// Object1 is the first object attached to the spring.
// Connection1 are the local coordinates of the attachment point of the first object.
// Object2 is the second object attached to the spring.
// Connection2 are the local coordinates of the attachment point of the second object.
// RestLength is the length of the spring which causes no forces to be applied.
// SpringConstant relates the length delta from the RestLength and the magnitude of force applied.
type TwoBodySpring struct {
	Object1        *Object
	Connection1    mgl32.Vec3
	Object2        *Object
	Connection2    mgl32.Vec3
	RestLength     float32
	SpringConstant float32
}

// AccumulateForce : Generates the forces generated by this spring on the two attached objects and adds them to the force accumulators.  Returns any objects for which forces were generated.
func (s *TwoBodySpring) AccumulateForce(duration float64) []*Object {
	// Calculate the two ends in world space
	start := s.Object1.WorldSpace(s.Connection1)
	end := s.Object2.WorldSpace(s.Connection2)

	// Calculate the direction of the spring force
	direction := end.Sub(start)

	// Calculate the magnitude of the force
	magnitude := (direction.Len()-s.RestLength) * s.SpringConstant

	direction = direction.Normalize()

	// Calculate the force for Object1
	force1 := direction.Mul(magnitude)
	s.Object1.Body.AccumulateForceAtLocalPoint(force1, s.Connection1)

	// Calculate the force for Object2
	force2 := direction.Mul(-magnitude)
	s.Object2.Body.AccumulateForceAtLocalPoint(force2, s.Connection2)

	return []*Object{s.Object1, s.Object2}
}
